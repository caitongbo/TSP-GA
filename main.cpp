#include<stdio.h>
#include<stdlib.h>
#include<math.h>
#include<time.h>
#include <boost/random.hpp>


#define maxgen 1000
#define sizepop 100 // 种群数目
//#define pcross 0.7 // 交叉概率
//#define pmutation 0.06 // 变异概率
#define lenchrom 34 // 染色体长度(这里即为城市个数)

//int sizepop;
double pcross, pmutation;

double city_pos[lenchrom][2];
int chrom[sizepop][lenchrom]; // 种群
int best_result[lenchrom]; // 最佳路线
double min_distance; // 最短路径长度
int flag;
FILE* txtFile;

void init(void); // 种群初始化函数
double distance(double*, double*); // 计算两个城市之间的距离
double* min(double*); // 计算距离数组的最小值
double path_len(int*); // 计算某一个方案的路径长度，适应度函数为路线长度的倒数
void Choice(int[sizepop][lenchrom]); // 选择操作
void Cross(int[sizepop][lenchrom]); // 交叉操作
void Mutation(int[sizepop][lenchrom]); // 变异操作
void Reverse(int[sizepop][lenchrom]); // 逆转操作
void Readdata();
void Writeresult();

//void Writeresult(int i)
//{
//	FILE* fp2 = fopen("result.txt", "w");
//	fprintf(fp2, "This is %d genes: \n", i);
//	fprintf(fp2, "This is the best way for now: ");
//	for (int k = 0; k < lenchrom - 1; k++)
//	{
//		fprintf(fp2, "%d-->", best_result[k]);
//	}
//	fprintf(fp2, "%d \n", best_result[lenchrom - 1]);
//}
void Readdata()
{
	int i, j;
	FILE* fp1 = fopen("data.txt", "r");
	for (i = 0;i < lenchrom;i++)
		for (j = 0; j < 2; j++)
		{
			fscanf(fp1, "%lf", &city_pos[i][j]);
		}
}

//(0,1)随机数产生函数  
double randx()
{
	double val;

	boost::mt19937 generator(time(0) * rand());
	boost::uniform_real<> uniform_real_generate_x(0, 1);
	boost::variate_generator< boost::mt19937&, boost::uniform_real<> > random_real_num_x(generator, uniform_real_generate_x);

	val = random_real_num_x();

	return(val);
}

// 种群初始化
void init(void)
{
	int num = 0;
	while (num < sizepop)
	{
		for (int i = 0; i < sizepop; i++)
			for (int j = 0; j < lenchrom; j++)
				chrom[i][j] = j + 1;
		num++;
		for (int i = 0; i < lenchrom - 1; i++)
		{
			for (int j = i + 1; j < lenchrom; j++)
			{
				int temp = chrom[num][i];
				chrom[num][i] = chrom[num][j];
				chrom[num][j] = temp; // 交换第num个个体的第i个元素和第j个元素
				num++;
				if (num >= sizepop)
					break;
			}
			if (num >= sizepop)
				break;
		}
		// 如果经过上面的循环还是无法产生足够的初始个体，则随机再补充一部分
		// 具体方式就是选择两个基因位置，然后交换
		while (num < sizepop)
		{
			double r1 = randx();
			double r2 = randx();
		
			int p1 = (int)(lenchrom * r1); // 位置1
			int p2 = (int)(lenchrom * r2); // 位置2
			int temp = chrom[num][p1];
			chrom[num][p1] = chrom[num][p2];
			chrom[num][p2] = temp;    // 交换基因位置
			num++;
		}
	}
}

// 距离函数
double distance(double* city1, double* city2)
{
	double x1 = *city1;
	double y1 = *(city1 + 1);
	double x2 = *(city2);
	double y2 = *(city2 + 1);
	double dis = sqrt((x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2));
	return dis;
}
// min()函数
double* min(double* arr)
{
	static double best_index[2];
	double min_dis = *arr;
	double min_index = 0;
	for (int i = 1; i < sizepop; i++)
	{
		double dis = *(arr + i);
		if (dis < min_dis)
		{
			min_dis = dis;
			min_index = i;
		}
	}
	best_index[0] = min_index;
	best_index[1] = min_dis;
	return best_index;
}

// 计算路径长度
double path_len(int* arr)
{
	double path = 0; // 初始化路径长度
	int index = *arr; // 定位到第一个数字(城市序号)
	for (int i = 0; i < lenchrom - 1; i++)
	{
		int index1 = *(arr + i);
		int index2 = *(arr + i + 1);
		double dis = distance(city_pos[index1 - 1], city_pos[index2 - 1]);
		path += dis;
	}
	int last_index = *(arr + lenchrom - 1); // 最后一个城市序号
	int first_index = *arr; // 第一个城市序号
	double last_dis = distance(city_pos[last_index - 1], city_pos[first_index - 1]);
	path = path + last_dis;
	return path; // 返回总的路径长度
}

// 选择操作
void Choice(int chrom[sizepop][lenchrom])
{
	double pick;
	double choice_arr[sizepop][lenchrom];
	double fit_pro[sizepop];
	double sum = 0;
	double fit[sizepop]; // 适应度函数数组(距离的倒数)
	for (int j = 0; j < sizepop; j++)
	{
		double path = path_len(chrom[j]);
		double fitness = 1 / path;
		fit[j] = fitness;
		sum += fitness;
	}
	for (int j = 0; j < sizepop; j++)
	{
		fit_pro[j] = fit[j] / sum; // 概率数组
	}
	// 开始轮盘赌
	for (int i = 0; i < sizepop; i++)
	{
		pick = randx(); // 0到1之间的随机数
		for (int j = 0; j < sizepop; j++)
		{
			pick = pick - fit_pro[j];
			if (pick <= 0)
			{
				for (int k = 0; k < lenchrom; k++)
					choice_arr[i][k] = chrom[j][k]; // 选中一个个体
				break;
			}
		}

	}
	for (int i = 0; i < sizepop; i++)
	{
		for (int j = 0; j < lenchrom; j++)
			chrom[i][j] = choice_arr[i][j];
	}
}

//交叉操作
void Cross(int chrom[sizepop][lenchrom])
{
	double pick;
	double pick1, pick2;
	int choice1, choice2;
	int pos1, pos2;
	int temp;
	int conflict1[lenchrom]; // 冲突位置
	int conflict2[lenchrom];
	int num1, num2;
	int index1, index2;
	int move = 0; // 当前移动的位置
	while (move < lenchrom - 1)
	{
		pick = randx(); // 用于决定是否进行交叉操作
		if (pick > pcross)
		{
			move += 2;
			continue; // 本次不进行交叉
		}
		// 采用部分映射杂交
		choice1 = move; // 用于选取杂交的两个父代
		choice2 = move + 1; // 注意避免下标越界
		pick1 = randx();
		pick2 = randx();
		pos1 = (int)(pick1 * lenchrom); // 用于确定两个杂交点的位置
		pos2 = (int)(pick2 * lenchrom);
		while (pos1 > lenchrom - 2 || pos1 < 1)
		{
			pick1 = randx();
			pos1 = (int)(pick1 * lenchrom);
		}
		while (pos2 > lenchrom - 2 || pos2 < 1)
		{
			pick2 = randx();
			pos2 = (int)(pick2 * lenchrom);
		}
		if (pos1 > pos2)
		{
			temp = pos1;
			pos1 = pos2;
			pos2 = temp; // 交换pos1和pos2的位置
		}
		for (int j = pos1; j <= pos2; j++)
		{
			temp = chrom[choice1][j];
			chrom[choice1][j] = chrom[choice2][j];
			chrom[choice2][j] = temp; // 逐个交换顺序
		}
		num1 = 0;
		num2 = 0;
		if (pos1 > 0 && pos2 < lenchrom - 1)
		{
			for (int j = 0; j <= pos1 - 1; j++)
			{
				for (int k = pos1; k <= pos2; k++)
				{
					if (chrom[choice1][j] == chrom[choice1][k])
					{
						conflict1[num1] = j;
						num1++;
					}
					if (chrom[choice2][j] == chrom[choice2][k])
					{
						conflict2[num2] = j;
						num2++;
					}
				}
			}
			for (int j = pos2 + 1; j < lenchrom; j++)
			{
				for (int k = pos1; k <= pos2; k++)
				{
					if (chrom[choice1][j] == chrom[choice1][k])
					{
						conflict1[num1] = j;
						num1++;
					}
					if (chrom[choice2][j] == chrom[choice2][k])
					{
						conflict2[num2] = j;
						num2++;
					}
				}

			}
		}
		if ((num1 == num2) && num1 > 0)
		{
			for (int j = 0; j < num1; j++)
			{
				index1 = conflict1[j];
				index2 = conflict2[j];
				temp = chrom[choice1][index1]; // 交换冲突的位置
				chrom[choice1][index1] = chrom[choice2][index2];
				chrom[choice2][index2] = temp;
			}
		}
		move += 2;
	}
}

// 变异操作
// 变异策略采取随机选取两个点，将其对换位置
void Mutation(int chrom[sizepop][lenchrom])
{
	double pick, pick1, pick2;
	int pos1, pos2, temp;
	for (int i = 0; i < sizepop; i++)
	{
		pick = randx(); // 用于判断是否进行变异操作
		if (pick > pmutation)
			continue;
		pick1 = randx();
		pick2 = randx();
		pos1 = (int)(pick1 * lenchrom); // 选取进行变异的位置
		pos2 = (int)(pick2 * lenchrom);
		while (pos1 > lenchrom - 1)
		{
			pick1 = randx();
			pos1 = (int)(pick1 * lenchrom);
		}
		while (pos2 > lenchrom - 1)
		{
			pick2 = randx();
			pos2 = (int)(pick2 * lenchrom);
		}
		temp = chrom[i][pos1];
		chrom[i][pos1] = chrom[i][pos2];
		chrom[i][pos2] = temp;
	}
}

void Reverse(int chrom[sizepop][lenchrom])
{
	double pick1, pick2;
	double dis, reverse_dis;
	int n;
	int flag, pos1, pos2, temp;
	int reverse_arr[lenchrom];

	for (int i = 0; i < sizepop; i++)
	{
		flag = 0; // 用于控制本次逆转是否有效
		while (flag == 0)
		{
			pick1 = randx();
			pick2 = randx();
			pos1 = (int)(pick1 * lenchrom); // 选取进行逆转操作的位置
			pos2 = (int)(pick2 * lenchrom);
			while (pos1 > lenchrom - 1)
			{
				pick1 = randx();
				pos1 = (int)(pick1 * lenchrom);
			}
			while (pos2 > lenchrom - 1)
			{
				pick2 = randx();
				pos2 = (int)(pick2 * lenchrom);
			}
			if (pos1 > pos2)
			{
				temp = pos1;
				pos1 = pos2;
				pos2 = temp; // 交换使得pos1 <= pos2
			}
			if (pos1 < pos2)
			{
				for (int j = 0; j < lenchrom; j++)
					reverse_arr[j] = chrom[i][j]; // 复制数组
				n = 0; // 逆转数目
				for (int j = pos1; j <= pos2; j++)
				{
					reverse_arr[j] = chrom[i][pos2 - n]; // 逆转数组
					n++;
				}
				reverse_dis = path_len(reverse_arr); // 逆转之后的距离
				dis = path_len(chrom[i]); // 原始距离
				if (reverse_dis < dis)
				{
					for (int j = 0; j < lenchrom; j++)
						chrom[i][j] = reverse_arr[j]; // 更新个体
				}
			}
			flag = 1;
		}

	}
}

// 主函数
void start_function(void)
{
	char result_file[100];

	//结果txt文件输出操作
	if (flag == 0)
	{
		sprintf(result_file, "result/result_p.txt");
			if ((txtFile = fopen(result_file, "a")) == NULL)
			{
				printf("文件打开失败！");
				exit(1);
			}
		else
		{
			if ((txtFile = fopen(result_file, "a")) == NULL)
			{
				printf("文件打开失败！");
				exit(1);
			}
		}
	}
	else if (flag == 1) {
		sprintf(result_file, "result/result_pc.txt");

		if (pcross == 0.1) {
			if ((txtFile = fopen(result_file, "w")) == NULL)
			{
				printf("文件打开失败！");
				exit(1);
			}
		}
		else
		{
			if ((txtFile = fopen(result_file, "a")) == NULL)
			{
				printf("文件打开失败！");
				exit(1);
			}
		}
	}
	else if (flag == 2)
	{
		sprintf(result_file, "result/result_pm.txt");

		if (pmutation == 0.01) {
			if ((txtFile = fopen(result_file, "w")) == NULL)
			{
				printf("文件打开失败！");
				exit(1);
			}
		}
		else
		{
			if ((txtFile = fopen(result_file, "a")) == NULL)
			{
				printf("文件打开失败！");
				exit(1);
			}
		}
	}
	else
	{
		printf("error\n");
		exit(1);
	}

	printf("\n F正在计算，请稍后...\n");

	//FILE* fp2 = fopen("result.txt", "w");
	Readdata();
	//int maxgen;
	//printf("Please input the genes:\n");
	//scanf("%d", &maxgen);
	time_t start, finish;
	start = clock(); // 开始计时
	srand((unsigned)time(NULL)); // 初始化随机数种子
	init(); // 初始化种群

	int best_fit_index = 0; //最短路径出现代数
	double distance_arr[sizepop];
	double dis;
	for (int j = 0; j < sizepop; j++)
	{
		dis = path_len(chrom[j]);
		distance_arr[j] = dis;
	}
	double* best_index = min(distance_arr); // 计算最短路径及序号
	min_distance = *(best_index + 1); // 最短路径
	int index = (int)(*best_index); // 最短路径序号
	for (int j = 0; j < lenchrom; j++)
		best_result[j] = chrom[index][j]; // 最短路径序列

										  // 开始进化
	double* new_arr;
	double new_min_dis;
	int new_index;
	for (int i = 0; i < maxgen; i++)
	{
		Choice(chrom); // 选择
		Cross(chrom); //交叉
		Mutation(chrom); //变异
		Reverse(chrom); // 逆转操作
		for (int j = 0; j < sizepop; j++)
			distance_arr[j] = path_len(chrom[j]); // 距离数组
		new_arr = min(distance_arr);
		new_min_dis = *(new_arr + 1); //新的最短路径
		if (new_min_dis < min_distance)
		{
			min_distance = new_min_dis; // 更新最短路径
			new_index = (int)(*new_arr);
			for (int j = 0; j < lenchrom; j++)
				best_result[j] = chrom[new_index][j]; // 更新最短路径序列
			best_fit_index = i + 1; // 最短路径代数
		}

		if (flag == 0)
			fprintf(txtFile, "%d %d %.2f\n", sizepop, i+1, min_distance);
		else if (flag == 1)
			fprintf(txtFile, "%.2f %d %.2f\n", pcross, i+1, min_distance);
		else if (flag == 2)
			fprintf(txtFile, "%.2f %d %.2f\n", pmutation, i+1, min_distance);
		else
		{
			printf("error\n");
			exit(1);
		}
		//fprintf(txtFile, "%d %lf\n", i + 1, min_distance);

	//	fprintf(fp2, "This is %d genes: \n", i);
	//	fprintf(fp2, "This is the best way for now: ");
	//	for (int k = 0; k < lenchrom - 1; k++)
	//	{
	//		fprintf(fp2, "%d-->", best_result[k]);
	//	}
	//	fprintf(fp2, "%d \n", best_result[lenchrom - 1]);
	}
	//finish = clock(); // 计算结束
	//double duration = ((double)(finish - start)) / CLOCKS_PER_SEC; // 计算耗时
	//fprintf(fp2, "This is solve %d cities' Tsp,population number:%d,evolution number:%d\n", lenchrom, sizepop, maxgen);
	//for (int k = 0; k < lenchrom - 1; k++)
	//{
	//	fprintf(fp2, "%d-->", best_result[k]);
	//}
	//fprintf(fp2, "%d \n", best_result[lenchrom - 1]);
	//fprintf(fp2, "The length of best way: %lf,get the result in %d genes\n", min_distance, best_fit_index);
	//fprintf(fp2, "Running time: %lf seconds.\n", duration);
	fclose(txtFile);
	/*getchar();
	system("pause");*/
	printf("结果已输出：result.txt\n");
	
}

//测试种群大小对算法的性能影响
//POPSIZE [20,200]
//PXOVER = 0.7 , PMUTATION = 0.06
void test_popsize(double pc, double pm)
{
	int p;

	pcross = pc;
	pmutation = pm;

	flag = 0; //输出控制
	for (p = 10; p <= 100; p += 10)
	{
		//sizepop = p;
		printf("\n\n p = %d, pm = %lf, pc = %lf\n", sizepop, pmutation, pcross);

		//测试随机数的生成值
	   /* for (int j = 0; j < POPSIZE; j++)
		{
			for (int i = 0; i < NVARS; i++)
			{
				printf("P = %d, N = %d, x%d = %lf\n", j+1,i+1, i+1,population[j].gene[i]);
			}
		}*/

		//开启测试函数，如不进行某测试函数，通过"//"注释掉即可
		start_function(); //Rotated High Conditioned Elliptic Funcktion


		//释放内存空间
		/*free(x);
		free(f);
		delete[]population;
		delete[]newpopulation;*/
	}
}


//测试交叉大小对算法的性能影响 
//PXOVER [0.9.0.1]
//POPSIZE = 50, PMUTATION = 0.06
void test_pxover(int p, double pm)
{
	double pc;

	//sizepop = p;
	pmutation = pm;

	flag = 1; //输出控制

	for (pc = 0.1; pc <= 1.0; pc += 0.1)
	{
		pcross = pc;
		printf("\n\n p = %d, pm = %lf, pc = %lf\n", sizepop, pmutation, pcross);

		//测试随机数的生成值
		/* for (int j = 0; j < POPSIZE; j++)
		 {
			 for (int i = 0; i < NVARS; i++)
			 {
				 printf("P = %d, N = %d, x%d = %lf\n", j + 1, i + 1, i + 1, population[j].gene[i]);
			 }
		 }*/

		 //开启测试函数，如不进行某测试函数，通过"//"注释掉即可
		start_function(); //Rotated High Conditioned Elliptic Funcktion



	}

	//释放内存空间
	//free(x);
	//free(f);
	//delete[]population;
	//delete[]newpopulation;
}


//测试变异大小对算法的性能影响
//PMUTATION [0.01.0.1]
//POPSIZE = 50, PXOVER = 0.7
void test_pmutation(int p, double pc)
{
	double pm;

	//sizepop = p;
	pcross = pc;

	flag = 2; //输出控制

	for (pm = 0.01; pm <= 0.1; pm += 0.01)
	{
		pmutation = pm;
		printf("\n\n p = %d, pm = %lf, pc = %lf\n", sizepop, pmutation, pcross);


		//测试随机数的生成值
		/* for (int j = 0; j < POPSIZE; j++)
		 {
			 for (int i = 0; i < NVARS; i++)
			 {
				 printf("P = %d, N = %d, x%d = %lf\n", j + 1, i + 1, i + 1, population[j].gene[i]);
			 }
		 }*/

		 //开启测试函数，如不进行某测试函数，通过"//"注释掉即可
		start_function(); //Rotated High Conditioned Elliptic Funcktion

	}

	//释放内存空间
	/*free(x);
	free(f);
	delete[]population;
	delete[]newpopulation;*/
}


//主函数
void main(void) {

	int p;
	double pc, pm;

	p = 100;   //种群大小 [20,200]
	pc = 0.7;   //交叉率  [0.9,0.1]
	pm = 0.06;   //变异率 [0.01,0.1]

	//flag = 0;
	//pcross = 0.7;
	//pmutation = 0.06;
	//test_popsize(pc, pm); //测试种群大小对算法的性能影响

	test_pxover(p, pm); //测试交叉大小对算法的性能影响

	test_pmutation(p, pc); //测试变异大小对算法的性能影响

	//start_function();

}